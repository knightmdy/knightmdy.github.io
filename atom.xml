<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://knightmdy.github.io</id>
    <title>Gridea</title>
    <updated>2023-10-25T08:47:11.197Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://knightmdy.github.io"/>
    <link rel="self" href="https://knightmdy.github.io/atom.xml"/>
    <subtitle>knightmdy&apos;s blog</subtitle>
    <logo>https://knightmdy.github.io/images/avatar.png</logo>
    <icon>https://knightmdy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[JavaScript学习笔记(四)]]></title>
        <id>https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-si/</id>
        <link href="https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-si/">
        </link>
        <updated>2023-10-14T12:04:49.000Z</updated>
        <content type="html"><![CDATA[<p>函数<br>
1.闭包(?嵌套作用域?)<br>
闭包是 JavaScript 中最强大的特性之一。JavaScript 允许函数嵌套，并且内部函数具有定义在外部函数中的所有变量和函数（以及外部函数能访问的所有变量和函数）的完全访问权限。<br>
但是，外部函数却不能访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一种封装。<br>
此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数的生存周期将比内部函数执行的持续时间要长。当内部函数以某一种方式被任何一个外部函数之外的任何作用域访问时，就会创建闭包。<br>
备注： 如果一个闭包的函数定义了一个和外部外部的某个变量名称相同的变量，那么这个闭包将无法引用外部作用域中的这个变量。（内部作用域的变量“覆盖”外部作用域，直至程序退出内部作用域。可以将其视作命名冲突。）<br>
2.使用 arguments 对象<br>
函数的实际参数会被保存在一个类似数组的 arguments 对象中。在函数内，你可以按如下方式找出传入的参数：<br>
arguments[i];<br>
其中 i 是参数的序号，从 0 开始。所以第一个传入函数的参数会是 arguments[0]。参数的数量由 arguments.length 表示。<br>
使用 arguments 对象，你可以处理比声明更多的参数来调用函数。这在你事先不知道会需要将多少参数传递给函数时十分有用。你可以用 arguments.length 来获得实际传递给函数的参数的数量，然后用 arguments 对象来访问每个参数。<br>
备注： arguments 变量只是“类数组”，而不是数组。它与数组类似，有索引编号和 length 属性。尽管如此，它并不具备 Array 对象的所有数组操作方法。<br>
3.参数<br>
默认参数 (在 JavaScript 中，函数参数的默认值是 undefined。然而，在某些情况下设置不同的默认值可能会很有用。这正是默认参数的作用。)<br>
剩余参数(剩余参数语法允许将不确定数量的参数表示为数组。)<br>
在下面的示例中，multiply 函数使用剩余参数收集从第二个参数开始到最后的参数。然后，该函数将它们与第一个参数相乘。<br>
function multiply(multiplier, ...theArgs) {<br>
return theArgs.map((x) =&gt; multiplier * x);<br>
}<br>
const arr = multiply(2, 1, 2, 3);<br>
console.log(arr); // [2, 4, 6]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript学习笔记(三)]]></title>
        <id>https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-san/</id>
        <link href="https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-san/">
        </link>
        <updated>2023-10-14T11:46:38.000Z</updated>
        <content type="html"><![CDATA[<p>箭头函数<br>
箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。<br>
注意<br>
1.没有单独的this<br>
2.通过 call 或 apply 调用<br>
由于 箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定 this---译者注），他们的第一个参数会被忽略。（这种现象对于 bind 方法同样成立 --- 译者注）<br>
3.不绑定arguments,在大多数情况下，使用剩余参数是相较使用arguments对象的更好选择。<br>
4.箭头函数不能用作构造器，和 new一起用会抛出错误。<br>
5.箭头函数没有prototype属性。<br>
6.yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作函数生成器。<br>
7.箭头函数在参数和箭头之间不能换行。但是，可以通过在‘=&gt;’之后换行，或者用‘( )’、'{ }'来实现换行。</p>
<p>function 函数名(参数){<br>
函数体<br>
返回值<br>
}//正常函数<br>
函数名(参数)=&gt;{<br>
函数体<br>
返回值<br>
}//箭头函数</p>
<p>示例<br>
//正常函数(返回数组)<br>
var elements = [&quot;Hydrogen&quot;, &quot;Helium&quot;, &quot;Lithium&quot;, &quot;Beryllium&quot;];<br>
elements.map(function (element) {<br>
return element.length;<br>
}); // 返回数组：[8, 6, 7, 9]<br>
// 上面的普通函数可以改写成如下的箭头函数<br>
elements.map((element) =&gt; {<br>
return element.length;<br>
}); // [8, 6, 7, 9]<br>
// 当箭头函数只有一个参数时，可以省略参数的圆括号<br>
elements.map(element =&gt; {<br>
return element.length;<br>
}); // [8, 6, 7, 9]<br>
// 当箭头函数的函数体只有一个 <code>return</code> 语句时，可以省略 <code>return</code> 关键字和方法体的花括号<br>
elements.map((element) =&gt; element.length); // [8, 6, 7, 9]<br>
// 在这个例子中，因为我们只需要 <code>length</code> 属性，所以可以使用参数解构<br>
// 需要注意的是字符串 <code>&quot;length&quot;</code> 是我们想要获得的属性的名称，而 <code>lengthFooBArX</code> 则只是个变量名，<br>
// 可以替换成任意合法的变量名<br>
elements.map(({ length: lengthFooBArX }) =&gt; lengthFooBArX); // [8, 6, 7, 9]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写于20岁(2023.10.13)]]></title>
        <id>https://knightmdy.github.io/post/xie-yu-20-sui-20231013/</id>
        <link href="https://knightmdy.github.io/post/xie-yu-20-sui-20231013/">
        </link>
        <updated>2023-10-13T15:05:36.000Z</updated>
        <content type="html"><![CDATA[<p>奔三了!!!<br>
<img src="https://knightmdy.github.io/post-images/1698223568249.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript学习笔记(二)]]></title>
        <id>https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-er/</id>
        <link href="https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-er/">
        </link>
        <updated>2023-10-12T06:26:39.000Z</updated>
        <content type="html"><![CDATA[<p>异步JavaScript<br>
1.异步的实现目标<br>
通过调用一个函数来启动一个长期运行的操作<br>
让函数开始操作并立即返回，这样我们的程序就可以保持对其他事件做出反应的能力<br>
当操作最终完成时，通知我们操作的结果。<br>
2.回调函数(×)<br>
在 JavaScript 中，函数即对象。函数将另一个函数作为参数，并在函数体内部调用它。JavaScript里，我们叫它“回调”。所以，被传递给另一个函数作为参数的函数叫作回调函数。回调函数确保：函数在某个任务完成之前不运行，在任务完成之后立即运行。它帮助我们编写异步 JavaScript 代码，避免问题和错误。<br>
3.Promise<br>
链式调用<br>
fetch(&quot;heeps://...&quot;)<br>
.then(...)<br>
.then(...)<br>
.then(...); //&quot;...&quot;代表箭头函数或其他参数类型<br>
错误捕获<br>
fetch(&quot;heeps://...&quot;)<br>
.then(...)<br>
.then(...)<br>
.catch(...);<br>
合并使用多个 Promise<br>
例:<br>
Promise.all()    (所有的 Promise 都得到实现，但它们并不相互依赖。)<br>
Promise.any()  (等待一组 Promise 中的某一个 Promise 的执行，而不关心是哪一个。)<br>
const fetchPromise1 = fetch(<br>
&quot;https://&quot;,<br>
);<br>
const fetchPromise2 = fetch(<br>
&quot;https://&quot;,<br>
);<br>
const fetchPromise3 = fetch(<br>
&quot;https://&quot;,<br>
);<br>
Promise.all([fetchPromise1, fetchPromise2, fetchPromise3])<br>
.then(/<em>(responses) =&gt; {<br>
for (const response of responses) {<br>
console.log(<code>${response.url}：${response.status}</code>);<br>
}<br>
}</em>/)<br>
.catch((error) =&gt; {<br>
console.error(<code>获取失败：${error}</code>);<br>
});<br>
async 和 await<br>
在一个函数的开头添加 async，就可以使其成为一个异步函数(返回值为promise对象)。在异步函数中，你可以在调用一个返回 Promise 的函数之前使用 await 关键字。这使得代码在该点上等待，直到 Promise 被完成，这时 Promise 的响应被当作返回值，或者被拒绝的响应被作为错误抛出。async 和 await 关键字使得从一系列连续的异步函数调用中建立一个操作变得更加容易，避免了创建显式 Promise 链，并允许你像编写同步代码那样编写异步代码。<br>
async function fetchProducts() {<br>
try {<br>
const response = await fetch(<br>
&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;,<br>
);<br>
if (!response.ok) {<br>
throw new Error(<code>HTTP 请求错误：${response.status}</code>);<br>
}<br>
const json = await response.json();<br>
return json;<br>
} catch (error) {<br>
console.error(<code>无法获取产品列表：${error}</code>);<br>
}<br>
}<br>
const jsonPromise = fetchProducts();<br>
jsonPromise.then((json) =&gt; console.log(json[0].name));</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript学习笔记(一)]]></title>
        <id>https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-yi/</id>
        <link href="https://knightmdy.github.io/post/javascript-xue-xi-bi-ji-yi/">
        </link>
        <updated>2023-10-12T05:51:09.000Z</updated>
        <content type="html"><![CDATA[<p>类和构造函数<br>
1.使用class关键字声明一个类  。<br>
2.使用constructor关键字声明构造函数。<br>
3.使用extends关键字声明继承关系 。<br>
4.构造函数中需要做的第一件事是使用 super() 调用父类的构造函数，并传递父类参数。如果子类有任何自己的初始化内容需要完成，它也必须先使用 super() 来调用父类的构造函数，并传递父类构造函数期望的任何参数。(先父后子)<br>
5.私有数据和私有方法使用#开头。</p>
<p>对象原型<br>
1.JavaScript 中所有的对象都有一个内置属性，称为它的 prototype（原型）。它本身是一个对象，故原型对象也会有它自己的原型，逐渐构成了原型链。原型链终止于拥有 null 作为其原型的对象上。( 指向对象原型的属性并不是 prototype。它的名字不是标准的，但实际上所有浏览器都使用 <strong>proto</strong>。访问对象原型的标准方法是 Object.getPrototypeOf()。)<br>
2.如果在一个对象中定义了一个属性，而在该对象的原型中定义了一个同名的属性,该对象会首先调用本身的属性,即为属性的&quot;遮蔽&quot;。<br>
3.在 JavaScript 中，有多种设置对象原型的方法，我将介绍两种：Object.create() 和构造函数。<br>
使用 Object.create() :<br>
const A = (){......};const B = Object.create(A);//B的原型为A<br>
使用构造函数 :<br>
在 JavaScript 中，所有的函数都有一个名为 prototype 的属性。当你调用一个函数作为构造函数时，这个属性被设置为新构造对象的原型（按照惯例，在名为 <strong>proto</strong> 的属性中）。因此，如果我们设置一个构造函数的 prototype，我们可以确保所有用该构造函数创建的对象都被赋予该原型：<br>
const A = (){......};function B(){};Object.assign(B.prototype, A);/或 B.prototype.函数 = A.函数;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构与算法(一)]]></title>
        <id>https://knightmdy.github.io/post/shu-ju-jie-gou-yu-suan-fa-yi/</id>
        <link href="https://knightmdy.github.io/post/shu-ju-jie-gou-yu-suan-fa-yi/">
        </link>
        <updated>2023-10-08T09:56:07.000Z</updated>
        <summary type="html"><![CDATA[<p>day 1  复杂度分析</p>
]]></summary>
        <content type="html"><![CDATA[<p>day 1  复杂度分析</p>
<!-- more -->
<p>时间复杂度</p>
<!-- more -->
<p>空间复杂度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电影推荐(一)]]></title>
        <id>https://knightmdy.github.io/post/dian-ying-tui-jian-yi/</id>
        <link href="https://knightmdy.github.io/post/dian-ying-tui-jian-yi/">
        </link>
        <updated>2023-10-03T11:52:28.000Z</updated>
        <content type="html"><![CDATA[<p>吹爆浪客剑心(在b站可以看),漫改的神.<br>
人间不见白梅香，生者独守十字伤</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的第一篇博客(写于23年国庆假期)]]></title>
        <id>https://knightmdy.github.io/post/wo-de-di-yi-pian-bo-ke-xie-yu-23-nian-guo-qing-jia-qi/</id>
        <link href="https://knightmdy.github.io/post/wo-de-di-yi-pian-bo-ke-xie-yu-23-nian-guo-qing-jia-qi/">
        </link>
        <updated>2023-09-29T09:14:17.000Z</updated>
        <content type="html"><![CDATA[<p>最近看到身边的同学开始弄自几的博客,就自几弄了一个<br>
之前尝试过使用一位大佬开源的hexo模板,但是由于不熟悉该框架选择了换掉,而且该框架操作不便<br>
https://www.fomal.cc/<br>
在实现博客过程中学习了很多cmd命令,git操作和GitHub操作知识<br>
选择现在这个框架主要是因为写博客可以在客户端运行,可以节省一些时间<br>
现在作为一名计算机专业大二学生,自几认为自己上学年玩的有点过了<br>
接下来我将主要进行js,vue,数据结构等方面的的学习,希望记录自己的成长</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://knightmdy.github.io/post/hello-gridea/</id>
        <link href="https://knightmdy.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>